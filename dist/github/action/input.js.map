{
  "version": 3,
  "sources": ["../../../src/github/action/input.ts"],
  "sourcesContent": ["/**\n * Action input configuration\n */\ninterface ActionInputs {\n  token: string;\n  issueScope: \"target\" | \"all\";\n  targetIssueCreators: string[];\n  minLinkedPRs: number;\n  minMergedPRs: number;\n  targetLabels: string[];\n}\n\n/**\n * Parse action inputs from environment variables\n * @returns Parsed action inputs\n */\nexport function parseInputs(): ActionInputs {\n  const token = process.env.GITHUB_TOKEN as string;\n  const issueScope = (process.env.ISSUE_SCOPE || \"target\") as \"target\" | \"all\";\n\n  const targetIssueCreatorsInput = process.env.TARGET_ISSUE_CREATORS || \"\";\n  const targetIssueCreators = targetIssueCreatorsInput\n    .split(\",\")\n    .map((creator) => creator.trim())\n    .filter((creator) => creator.length > 0);\n\n  const minLinkedPRs = parseInt(process.env.MIN_LINKED_PRS || \"1\", 10);\n  const minMergedPRs = parseInt(process.env.MIN_MERGED_PRS || \"1\", 10);\n\n  const targetLabelsInput = process.env.TARGET_LABELS || \"\";\n  const targetLabels = targetLabelsInput\n    .split(\",\")\n    .map((label) => label.trim())\n    .filter((label) => label.length > 0);\n\n  return {\n    token,\n    issueScope,\n    targetIssueCreators,\n    minLinkedPRs,\n    minMergedPRs,\n    targetLabels,\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBO,SAAS,cAA4B;AAC1C,QAAM,QAAQ,QAAQ,IAAI;AAC1B,QAAM,aAAc,QAAQ,IAAI,eAAe;AAE/C,QAAM,2BAA2B,QAAQ,IAAI,yBAAyB;AACtE,QAAM,sBAAsB,yBACzB,MAAM,GAAG,EACT,IAAI,CAAC,YAAY,QAAQ,KAAK,CAAC,EAC/B,OAAO,CAAC,YAAY,QAAQ,SAAS,CAAC;AAEzC,QAAM,eAAe,SAAS,QAAQ,IAAI,kBAAkB,KAAK,EAAE;AACnE,QAAM,eAAe,SAAS,QAAQ,IAAI,kBAAkB,KAAK,EAAE;AAEnE,QAAM,oBAAoB,QAAQ,IAAI,iBAAiB;AACvD,QAAM,eAAe,kBAClB,MAAM,GAAG,EACT,IAAI,CAAC,UAAU,MAAM,KAAK,CAAC,EAC3B,OAAO,CAAC,UAAU,MAAM,SAAS,CAAC;AAErC,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
