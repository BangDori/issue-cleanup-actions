{
  "version": 3,
  "sources": ["../../../src/github/pull-request/pr-analyzer.ts"],
  "sourcesContent": ["import { Octokit, RepoContext } from \"../type/types\";\n\n/**\n * Get linked PRs from issue timeline\n */\nexport async function getLinkedPRs(\n  octokit: Octokit,\n  context: RepoContext,\n  issueNumber: number\n): Promise<any[]> {\n  const { data: timeline } = await octokit.rest.issues.listEventsForTimeline({\n    owner: context.owner,\n    repo: context.repo,\n    issue_number: issueNumber,\n  });\n\n  return timeline.filter(\n    (event: any) =>\n      event.event === \"cross-referenced\" &&\n      event.source &&\n      event.source.type === \"issue\" &&\n      event.source.issue.pull_request\n  );\n}\n\n/**\n * Count merged PRs from linked PRs\n */\nexport async function countMergedPRs(\n  octokit: Octokit,\n  context: RepoContext,\n  linkedPRs: any[]\n): Promise<number> {\n  let mergedCount = 0;\n\n  for (const linkedPR of linkedPRs) {\n    const prNumber = linkedPR.source.issue.number;\n\n    const { data: prDetails } = await octokit.rest.pulls.get({\n      owner: context.owner,\n      repo: context.repo,\n      pull_number: prNumber,\n    });\n\n    if (prDetails.merged) {\n      mergedCount++;\n    }\n  }\n\n  return mergedCount;\n}\n\n/**\n * Check if any PR body references the issue\n */\nexport async function hasIssueReferenceInPRs(\n  octokit: Octokit,\n  context: RepoContext,\n  issueNumber: number,\n  linkedPRs: any[]\n): Promise<boolean> {\n  for (const linkedPR of linkedPRs) {\n    const prNumber = linkedPR.source.issue.number;\n\n    const { data: prDetails } = await octokit.rest.pulls.get({\n      owner: context.owner,\n      repo: context.repo,\n      pull_number: prNumber,\n    });\n\n    const issuePattern = new RegExp(`#${issueNumber}\\\\b`, \"i\");\n    if (prDetails.body && issuePattern.test(prDetails.body)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,eAAsB,aACpB,SACA,SACA,aACgB;AAChB,QAAM,EAAE,MAAM,SAAS,IAAI,MAAM,QAAQ,KAAK,OAAO,sBAAsB;AAAA,IACzE,OAAO,QAAQ;AAAA,IACf,MAAM,QAAQ;AAAA,IACd,cAAc;AAAA,EAChB,CAAC;AAED,SAAO,SAAS;AAAA,IACd,CAAC,UACC,MAAM,UAAU,sBAChB,MAAM,UACN,MAAM,OAAO,SAAS,WACtB,MAAM,OAAO,MAAM;AAAA,EACvB;AACF;AAKA,eAAsB,eACpB,SACA,SACA,WACiB;AACjB,MAAI,cAAc;AAElB,aAAW,YAAY,WAAW;AAChC,UAAM,WAAW,SAAS,OAAO,MAAM;AAEvC,UAAM,EAAE,MAAM,UAAU,IAAI,MAAM,QAAQ,KAAK,MAAM,IAAI;AAAA,MACvD,OAAO,QAAQ;AAAA,MACf,MAAM,QAAQ;AAAA,MACd,aAAa;AAAA,IACf,CAAC;AAED,QAAI,UAAU,QAAQ;AACpB;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;AAKA,eAAsB,uBACpB,SACA,SACA,aACA,WACkB;AAClB,aAAW,YAAY,WAAW;AAChC,UAAM,WAAW,SAAS,OAAO,MAAM;AAEvC,UAAM,EAAE,MAAM,UAAU,IAAI,MAAM,QAAQ,KAAK,MAAM,IAAI;AAAA,MACvD,OAAO,QAAQ;AAAA,MACf,MAAM,QAAQ;AAAA,MACd,aAAa;AAAA,IACf,CAAC;AAED,UAAM,eAAe,IAAI,OAAO,IAAI,WAAW,OAAO,GAAG;AACzD,QAAI,UAAU,QAAQ,aAAa,KAAK,UAAU,IAAI,GAAG;AACvD,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;",
  "names": []
}
